'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _error = require('./error');

var _error2 = _interopRequireDefault(_error);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Provide a simple state store shared across requests.
var stateCache = {
  defaults: {
    failed: false,
    header: 0,
    labels: null,
    loaded: false,
    offset: 0
  },
  store: {}
};

var Request = function () {
  function Request(options) {
    _classCallCheck(this, Request);

    this.options = options;
    this.index = options.requestIndex;

    // Abandon requests that have previously generated an error.
    if (this.state.failed) {
      throw new _error2.default('A previous request for this resource failed.');
    }

    // Abandon requests that have already been loaded.
    if (this.state.loaded) {
      throw new _error2.default('No more rows to load!');
    }
  }

  _createClass(Request, [{
    key: 'update',


    // Extend exsiting attributes with passed attributes.
    value: function update() {
      var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      stateCache.store[this.index] = _extends(this.state, attributes);
    }
  }, {
    key: 'state',
    get: function get() {
      var hasPreviousState = {}.hasOwnProperty.call(stateCache.store, this.index);
      var reset = this.options.user.reset || this.options.request.data;

      if (!hasPreviousState || reset) {
        var savedState = {
          labels: hasPreviousState ? stateCache.store[this.index].labels : null
        };

        stateCache.store[this.index] = _extends({}, stateCache.defaults, savedState);
      }

      return stateCache.store[this.index];
    }

    // Assemble a full URI for the query.

  }, {
    key: 'url',
    get: function get() {
      // If requested, make a request for paged data.
      var size = this.options.user.fetchSize;
      var pageQuery = size ? ' limit ' + (size + 1) + ' offset ' + this.state.offset : '';

      var queryVars = ['gid=' + encodeURIComponent(this.options.request.gid), 'tq=' + encodeURIComponent(this.options.user.query + pageQuery)];
      return this.options.request.apiEndpoint + queryVars.join('&');
    }
  }]);

  return Request;
}();

exports.default = Request;
module.exports = exports['default'];