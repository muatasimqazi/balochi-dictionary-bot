{
  "_args": [
    [
      {
        "raw": "google-sheets-node-api",
        "scope": null,
        "escapedName": "google-sheets-node-api",
        "name": "google-sheets-node-api",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot"
    ]
  ],
  "_from": "google-sheets-node-api@latest",
  "_id": "google-sheets-node-api@0.3.0",
  "_inCache": true,
  "_location": "/google-sheets-node-api",
  "_nodeVersion": "4.2.2",
  "_npmUser": {
    "name": "harishkswamy",
    "email": "harishkswamy@gmail.com"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {
    "aws4": "1.6.0",
    "bl": "1.1.2",
    "buffer-equal-constant-time": "1.0.1",
    "chalk": "1.1.3",
    "combined-stream": "1.0.5",
    "commander": "2.12.1",
    "concat-stream": "1.4.10",
    "ctype": "0.5.3",
    "ecdsa-sig-formatter": "1.0.9",
    "extend": "3.0.1",
    "forever-agent": "0.6.1",
    "gtoken": "1.2.3",
    "is-my-json-valid": "2.16.1",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "jsprim": "1.4.1",
    "lodash": "4.17.4",
    "lodash.noop": "3.0.1",
    "meow": "2.0.0",
    "mime-types": "2.1.17",
    "oauth-sign": "0.8.2",
    "pinkie-promise": "2.0.1",
    "punycode": "1.4.1",
    "sshpk": "1.13.1",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.3"
  },
  "_requested": {
    "raw": "google-sheets-node-api",
    "scope": null,
    "escapedName": "google-sheets-node-api",
    "name": "google-sheets-node-api",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/google-sheets-node-api/-/google-sheets-node-api-0.3.0.tgz",
  "_shasum": "7eea5359ae43efd890f9cb1b86e4d1c9c5631885",
  "_shrinkwrap": null,
  "_spec": "google-sheets-node-api",
  "_where": "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot",
  "author": {
    "name": "Theo Ephraim",
    "email": "theozero@gmail.com",
    "url": "http://theoephraim.com"
  },
  "bugs": {
    "url": "https://github.com/harishkswamy/google-sheets-node-api/issues"
  },
  "dependencies": {
    "google-auth-library": "^0.9.6",
    "q": "0.9.x",
    "q-io": "1.13.1",
    "request": "~2.29.0",
    "underscore": "x",
    "xml2js": "~0.4.0"
  },
  "description": "Promise (Q) based Google Spreadsheet Data API for Nodejs -- simple interface to read/write rows + cells",
  "devDependencies": {
    "async": "~0.2.9",
    "nodeunit": "~0.8.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "7eea5359ae43efd890f9cb1b86e4d1c9c5631885",
    "tarball": "https://registry.npmjs.org/google-sheets-node-api/-/google-sheets-node-api-0.3.0.tgz"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "gitHead": "fef026f50f424e85bd24560a9410c45a48144db0",
  "homepage": "https://github.com/harishkswamy/google-sheets-node-api",
  "keywords": [
    "google",
    "spreadsheet",
    "spreadsheets",
    "gdata",
    "api"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "harishkswamy",
      "email": "harishkswamy@gmail.com"
    }
  ],
  "name": "google-sheets-node-api",
  "optionalDependencies": {},
  "readme": "# Simple promise-based Google Sheets Access from Nodejs\r\n\r\n[![NPM version](https://badge.fury.io/js/google-sheets-node-api.png)](http://badge.fury.io/js/google-sheets-node-api)\r\n\r\nA simple Node.js library to read and manipulate data in Google Spreadsheets.\r\n\r\nWorks without authentication for read-only sheets or with auth for adding/editing/deleting data.\r\nSupports both list-based and cell-based feeds.\r\n\r\n## Installation\r\n\r\n`npm install google-sheets-node-api`\r\n\r\n\r\n\r\n## Basic Usage\r\n\r\n``` javascript\r\nvar creds = require('<client key JSON file>');\r\n\r\nvar GoogleSpreadsheet = require(\"google-sheets-node-api\");\r\n\r\nvar mySheet = new GoogleSpreadsheet('<spreadsheet ID>');\r\n\r\nmySheet.useServiceAccountAuth(creds).then(mySheet.getInfo.bind(mySheet)).then(function(sheet_info ) {\r\n    console.log( sheet_info.title + ' is loaded' );\r\n\r\n    var sheet1 = sheet_info.worksheets[0];\r\n\r\n    sheet1.addRow({'Col1': 'Val1', Col2: 'Val2', Col3:'Val3', Col4: 'Val4', Col5: 'Val5', Col6: 'Val6', Col7: 'Val7'})\r\n        .then(sheet1.getRows.bind(sheet1, null))\r\n        .then(function(rows) {\r\n            return [rows, rows[0].del()];\r\n        })\r\n        .spread(function(rows) {\r\n            console.log('Done deleteing');\r\n            rows[1].Col7 = 'new val2';\r\n            return rows[1].save();\r\n        })\r\n        .then(console.log.bind(console, 'Done saving'))\r\n        .catch(function(e) {\r\n            console.error(e);\r\n        });\r\n});\r\n```\r\n\r\n## Authentication\r\n\r\nIMPORTANT: Google recently deprecated their ClientLogin (username+password)\r\naccess, so things are slightly more complicated now. Older versions of this\r\nmodule supported it, so just be aware that things changed.\r\n\r\n### Unauthenticated access (read-only access on public docs)\r\n\r\nBy default, this module makes unauthenticated requests and can therefore\r\nonly access spreadsheets that are \"public\".\r\n\r\nThe Google Spreadsheets Data API reference and developers guide is a little\r\nambiguous about how you access a \"published\" public Spreadsheet.\r\n\r\nIf you wish to work with a Google Spreadsheet without authenticating, not only\r\nmust the Spreadsheet in question be visible to the web, but it must also have\r\nbeen explicitly published using \"File > Publish to the web\" menu option in\r\nthe google spreadsheets GUI.\r\n\r\nMany seemingly \"public\" sheets have not also been \"published\" so this may\r\ncause some confusion.\r\n\r\n\r\n### Service Account (recommended method)\r\n\r\nThis is a 2-legged oauth method and designed to be \"an account that belongs to your application instead of to an individual end user\".\r\nUse this for an app that needs to access a set of documents that you have full access to.\r\n([read more](https://developers.google.com/identity/protocols/OAuth2ServiceAccount))\r\n\r\n__Setup Instructions__\r\n\r\n1. Go to the [Google Developers Console](https://console.developers.google.com/project)\r\n2. Select your project or create a new one (and then select it)\r\n3. Enable the Drive API for your project\r\n  - In the sidebar on the left, expand __APIs & auth__ > __APIs__\r\n  - Search for \"drive\"\r\n  - Click on \"Drive API\"\r\n  - click the blue \"Enable API\" button\r\n4. Create a service account for your project\r\n  - In the sidebar on the left, expand __APIs & auth__ > __Credentials__\r\n  - Click \"Create new Client ID\" button\r\n  - select the \"Service account\" option\r\n  - click \"Create Client ID\" button to continue\r\n  - when the dialog appears click \"Okay, got it\"\r\n  - your JSON key file is generated and downloaded to your machine (__it is the only copy!__)\r\n  - note your service account's email address (also available in the JSON key file)\r\n5. Share the doc (or docs) with your service account using the email noted above\r\n\r\n\r\n## API\r\n\r\n### `GoogleSpreadsheet`\r\n\r\nThe main class that represents an entire spreadsheet.\r\n\r\n\r\n#### `new GoogleSpreadsheet(sheet_id, [auth], [options])`\r\n\r\nCreate a new google spreadsheet object.\r\n\r\n- `sheet_id` -- the ID of the spreadsheet (from its URL)\r\n- `auth` - (optional) an existing auth token\r\n- `options` - (optional)\r\n  - `visibility` - defaults to `public` if anonymous\r\n  - `projection` - defaults to `values` if anonymous\r\n\r\n\r\n\r\n#### `GoogleSpreadsheet.useServiceAccountAuth(account_info)`\r\n\r\nUses a service account email and public/private key to create a token to use to authenticated requests.\r\nNormally you would just pass in the require of the json file that google generates for you when you create a service account.\r\n\r\nSee the \"Authentication\" section for more info.\r\n\r\nIf you are using heroku or another environment where you cannot save a local file, you may just pass in an object with\r\n- `client_email` -- your service account's email address\r\n- `private_key` -- the private key found in the JSON file\r\n\r\nInternally, this uses a JWT client to generate a new auth token for your service account that is valid for 1 hour. The token will be automatically regenerated when it expires.\r\n\r\n\r\n\r\n#### `GoogleSpreadsheet.setAuthToken(id)`\r\n\r\nUse an already created auth token for all future requests.\r\n\r\n\r\n\r\n#### `GoogleSpreadsheet.getInfo()`\r\n\r\nGet information about the spreadsheet. Returns a promise which inturn will return the following object when fulfilled.\r\n\r\n- `title` - the title of the document\r\n- `updated` - last updated timestamp\r\n- `author` - auth info in an object\r\n  - `name` - author name\r\n  - `email` - author email\r\n- `worksheets` - an array of `SpreadsheetWorksheet` objects (see below)\r\n\r\n\r\n\r\n#### `GoogleSpreadsheet.getRows(worksheet_id, options)`\r\n\r\nReturns an array of row objects from the sheet when the promise is fulfilled.\r\n\r\n- `worksheet_id` - the index of the sheet to read from (index starts at 1)\r\n- `options` (optional)\r\n  - `start-index` - start reading from row #\r\n  - `max-results` - max # of rows to read at once\r\n  - `orderby` - column key to order by\r\n  - `reverse` - reverse results\r\n  - `query` - send a structured query for rows ([more info](https://developers.google.com/google-apps/spreadsheets/#sending_a_structured_query_for_rows))\r\n\r\n\r\n\r\n#### `GoogleSpreadsheet.addRow(worksheet_id, new_row)`\r\n\r\nAdds the new row to the sheet when the promise is fulfilled.\r\n\r\n- `worksheet_id` - the index of the sheet to add to (index starts at 1)\r\n- `new_row` - key-value object to add - keys must match the header row on your sheet\r\n\r\n\r\n\r\n#### `GoogleSpreadsheet.getCells(worksheet_id, options)`\r\n\r\nReturns an array of cell objects when the promise is fulfilled.\r\n\r\n- `worksheet_id` - the index of the sheet to add to (index starts at 1)\r\n- `options` (optional)\r\n  - `min-row` - row range min (uses #s visible on the left)\r\n  - `max-row` - row range max\r\n  - `min-col` - column range min (uses numbers, not letters!)\r\n  - `max-col` - column range max\r\n  - `return-empty` - include empty cells (boolean)\r\n\r\n\r\n----------------------------------\r\n\r\n### `SpreadsheetWorksheet`\r\n\r\nRepresents a single \"sheet\" from the spreadsheet. These are the different tabs/pages visible at the bottom of the Google Sheets interface.\r\n\r\nThis is a really just a wrapper to call the same functions on the spreadsheet without needing to include the worksheet id.\r\n\r\n__Properties:__\r\n- `id` - the ID of the sheet\r\n- `title` - the title (visible on the tabs in google's interface)\r\n- `rowCount` - number of rows\r\n- `colCount` - number of columns\r\n\r\n### `SpreadsheetWorksheet.getRows(options)`\r\nSee above.\r\n\r\n### `SpreadsheetWorksheet.getCells(options)`\r\nSee above.\r\n\r\n### `SpreadsheetWorksheet.addRow(new_row)`\r\nSee above.\r\n\r\n----------------------------------\r\n\r\n### `SpreadsheetRow`\r\nRepresents a single row from a sheet.\r\n\r\nYou can treat the row as a normal javascript object. Object keys will be from the header row of your sheet, however the google API mangles the names a bit to make them simpler. It's easiest if you just use all lowercase keys to begin with.\r\n\r\n#### `SpreadsheetRow.save()`\r\nSaves any changes made to the row's values.\r\n\r\n#### `SpreadsheetRow.del()`\r\nDeletes the row from the sheet.\r\n\r\n----------------------------------\r\n\r\n### `SpreadsheetCell`\r\nRepresents a single cell from the sheet.\r\n\r\n#### `SpreadsheetCell.setValue(val)`\r\nSet the value of the cell and save it.\r\n\r\n#### `SpreadsheetCell.del()`\r\nClear the cell -- internally just calls `.setValue('')`\r\n\r\n\r\n----------------------------------\r\n\r\n## Further possibilities & to-do\r\n\r\n- batch requests for cell based updates\r\n- modifying worksheet/spreadsheet properties\r\n- getting list of available spreadsheets for an authenticated user\r\n\r\n## Links\r\n\r\n- <https://developers.google.com/google-apps/spreadsheets/>\r\n- <https://github.com/Ajnasz/GoogleClientLogin>\r\n\r\n\r\n## Thanks\r\nThis is a rewrite of [node-google-spreadsheet](https://github.com/theoephraim/node-google-spreadsheet), so thanks to [Theo Ephraim](https://github.com/theoephraim)\r\nAlso big thanks fo GoogleClientLogin for dealing with authentication.\r\n\r\n\r\n## License\r\ngoogle-sheets-node-api is free and unencumbered public domain software. For more information, see the accompanying UNLICENSE file.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/harishkswamy/google-sheets-node-api.git"
  },
  "scripts": {
    "test": "nodeunit test/spreadsheet_test.js"
  },
  "version": "0.3.0"
}
