{
  "_args": [
    [
      {
        "raw": "sheetrock",
        "scope": null,
        "escapedName": "sheetrock",
        "name": "sheetrock",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot"
    ]
  ],
  "_from": "sheetrock@latest",
  "_id": "sheetrock@1.1.4",
  "_inCache": true,
  "_location": "/sheetrock",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/sheetrock-1.1.4.tgz_1484791909818_0.034789189929142594"
  },
  "_npmUser": {
    "name": "chriszarate",
    "email": "chris@zarate.org"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sheetrock",
    "scope": null,
    "escapedName": "sheetrock",
    "name": "sheetrock",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/sheetrock/-/sheetrock-1.1.4.tgz",
  "_shasum": "ed39b63a9dc925fcbf05c7074d06e3f5c1715deb",
  "_shrinkwrap": null,
  "_spec": "sheetrock",
  "_where": "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot",
  "author": {
    "name": "Chris Zarate",
    "url": "http://chris.zarate.org"
  },
  "ava": {
    "require": [
      "babel-core/register"
    ]
  },
  "babel": {
    "env": {
      "test": {
        "plugins": [
          "istanbul"
        ]
      }
    },
    "plugins": [
      "add-module-exports",
      "transform-object-assign"
    ],
    "presets": [
      [
        "env",
        {
          "targets": {
            "browsers": "last 2 versions",
            "node": 0.12
          }
        }
      ]
    ]
  },
  "browser": "./dist/sheetrock.min.js",
  "bugs": {
    "url": "https://github.com/chriszarate/sheetrock/issues"
  },
  "dependencies": {
    "ava": "^0.17.0",
    "request": "^2.79.0",
    "sinon": "^1.17.7",
    "webpack": "^1.14.0"
  },
  "description": "Quickly connect to, query, and lazy-load data from Google Spreadsheets.",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.21.0",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.10",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-istanbul": "^3.1.2",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-preset-env": "^1.1.8",
    "browserify": "^13.3.0",
    "codeclimate-test-reporter": "^0.4.0",
    "coveralls": "^2.11.15",
    "eslint": "^3.13.0",
    "eslint-config-airbnb": "^14.0.0",
    "eslint-loader": "^1.6.1",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^3.0.2",
    "eslint-plugin-react": "^6.9.0",
    "jasmine": "^2.5.3",
    "karma": "^1.4.0",
    "karma-browserify": "^5.1.0",
    "karma-jasmine": "^1.1.0",
    "karma-json-fixtures-preprocessor": "0.0.6",
    "karma-phantomjs-launcher": "^1.0.2",
    "karma-requirejs": "^1.1.0",
    "karma-sauce-launcher": "^1.1.0",
    "karma-webpack": "^2.0.1",
    "nyc": "^10.1.2",
    "phantomjs-prebuilt": "^2.1.14",
    "requirejs": "^2.3.2",
    "watchify": "^3.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ed39b63a9dc925fcbf05c7074d06e3f5c1715deb",
    "tarball": "https://registry.npmjs.org/sheetrock/-/sheetrock-1.1.4.tgz"
  },
  "gitHead": "5a224e2043a511afe65b0cc30a1dc50115e5bc28",
  "homepage": "https://chriszarate.github.io/sheetrock/",
  "jsnext:main": "src/index.js",
  "keywords": [
    "ecosystem:jquery",
    "jquery-plugin",
    "spreadsheet",
    "tables",
    "google",
    "googledocs",
    "ajax",
    "nodb"
  ],
  "license": "MIT",
  "main": "dist/src/index.js",
  "maintainers": [
    {
      "name": "chriszarate",
      "email": "chris@zarate.org"
    }
  ],
  "name": "sheetrock",
  "nyc": {
    "include": [
      "src"
    ],
    "instrument": false,
    "require": [
      "babel-core/register"
    ],
    "sourceMap": false
  },
  "optionalDependencies": {},
  "readme": "# Sheetrock\n\n[![Build status][build-status]][travis-ci]\n[![Test coverage][test-coverage]][code-climate-coverage]\n[![Code climate][code-climate-gpa]][code-climate-code]\n[![NPM version][npm-version]][fury-io]\n\n[![SauceLabs status][saucelabs-status]][saucelabs]\n\nSheetrock is a JavaScript library for querying, retrieving, and displaying data\nfrom Google Sheets. In other words, use a Google spreadsheet as your database!\nLoad entire worksheets or leverage SQL-like queries to sort, group, and filter\ndata. All you need is the URL of a public Google Sheet.\n\nSheetrock can be used in the browser or on the server (Node.js). It has no\ndependencies—but if jQuery is available, it will register as a plugin.\n\nBasic retrieval is a snap but you can also:\n\n* Query sheets using the SQL-like [Google Visualization query language][query]\n  (filters, pivots, sorting, grouping, and more)\n\n* Lazy-load large data sets (infinite scroll with ease)\n\n* Easily mix in your favorite templating system ([Handlebars][handlebars],\n  [Underscore][underscore], etc.)\n\n* Customize to your heart’s content with your own callbacks\n\n\n## Browser\n\nGrab the [latest version of Sheetrock][latest] for your project. Here’s an\nexample request (using jQuery):\n\n```html\n<table id=\"my-table\"></table>\n<script src=\"jquery.min.js\"></script>\n<script src=\"sheetrock.min.js\"></script>\n```\n\n```javascript\n$(\"#my-table\").sheetrock({\n  url: \"https://docs.google.com/spreadsheets/d/1qT1LyvoAcb0HTsi2rHBltBVpUBumAUzT__rhMvrz5Rk/edit#gid=0\",\n  query: \"select A,B,C,D,E,L where E = 'Both' order by L desc\"\n});\n```\n\nFor many more examples and accompanying jsFiddles, visit\n**[chriszarate.github.io/sheetrock][gh-pages]**.\n\n\n## Server\n\nSheetrock can also be used with Node.js:\n\n```bash\nnpm install sheetrock\n```\n\n```javascript\nvar sheetrock = require('sheetrock');\n\nvar myCallback = function (error, options, response) {\n  if (!error) {\n    /*\n      Parse response.data, loop through response.rows, or do something with\n      response.html.\n    */\n  }\n};\n\nsheetrock({\n  url: \"https://docs.google.com/spreadsheets/d/1qT1LyvoAcb0HTsi2rHBltBVpUBumAUzT__rhMvrz5Rk/edit#gid=0\",\n  query: \"select A,B,C,D,E,L where E = 'Both' order by L desc\",\n  callback: myCallback\n});\n```\n\n\n## Version 1.0\n\nIn version 1.0, Sheetrock has introduced a few backwards-incompatible changes,\nalthough most basic requests will still work. These changes make it simpler to\nuse; read the options below or the [CHANGELOG][changelog] for more details.\n\nThe previous `0.3.x` branch is [still available][0.3.x] and maintained.\n\n\n## Expectations\n\nSheetrock is designed to work with any Google Sheet, but makes some assumptions\nabout the format and availability.\n\n* **Public.** In order for others to access the data in your Sheet with\n  Sheetrock, the Sheet must be public. ([How do I make a spreadsheet public?][public])\n  It is possible to use Sheetrock to access a private Sheet for your own use if\n  you are logged in to your Google account in the same browser session, but\n  this is not a supported use case.\n\n* **One header row.** Sheetrock expects a single header row of column labels in\n  the first row of the Sheet. Any other configuration (e.g., no header row,\n  multiple or offset header rows) can cause problems with the request and\n  complicates templating. The header row values are used as keys in the cell\n  object unless you override them using the `labels` option.\n\n* **Plain text.** Sheetrock doesn’t handle formatted text. Any formatting\n  you’ve applied to your data—including hyperlinks—probably won’t show up.\n\n\n## Options\n\nSheetrock expects a hash map of options as a parameter, e.g.:\n\n```javascript\nsheetrock({/* options */});\n```\n\nYour options override Sheetrock’s defaults on a per-request basis. You can also\nglobally override defaults like this:\n\n```javascript\nsheetrock.defaults.url = \"https://docs.google.com/spreadsheets/d/1qT1LyvoAcb0HTsi2rHBltBVpUBumAUzT__rhMvrz5Rk/edit#gid=0\";\n```\n\n\n### url\n\n* Expects string\n\nThe URL of a public Google Sheet. ([How do I make a spreadsheet public?][public])\nMake sure you include the `#gid=X` portion of the URL; it identifies the\nspecific worksheet you want to use. If you want to access data from multiple\nworksheets, you will need to make multiple Sheetrock requests.\n\n\n### query\n\n* Expects string\n* Renamed from `sql` in 1.0.0\n\nA [Google Visualization API query][query] string. Use column letters in your\nqueries (e.g., `select A,B,D`).\n\n\n### target\n\n* Expects DOM element\n\nA DOM element that Sheetrock should append HTML output to. In a browser, for\nexample, you can use `document.getElementById` to reference a single element.\nIf you are using Sheetrock with jQuery, you can use the jQuery plugin syntax\n(e.g., `$('#my-table').sheetrock({/* options */})`) and ignore this option.\n\n\n### fetchSize\n\n* Expects non-negative integer\n* Renamed from `chunkSize` in 1.0.0\n\nUse this option to load a portion of the available rows. When set to `0` (the\ndefault), Sheetrock will fetch all available rows. When set to `10`, it will\nfetch ten rows and keep track of how many rows have been requested. On the next\nrequest with the same query, it will pick up where it left off.\n\n\n### labels\n\n* Expects array of strings\n\nOverride the returned column labels with an array of strings. Without this\noption, if you use your own `rowTemplate`, you must reference column labels\nexactly as they are returned by Google’s API. If your `sql` query uses `group`,\n`pivot`, or any of the [manipulation functions][manip], you will notice that\nGoogle’s returned column labels can be hard to predict. In those cases, this\noption can prove essential. The length of this array must match the number of\ncolumns in the returned data.\n\n\n### rowTemplate\n\n* Expects function\n* Renamed from `rowHandler` in 1.0.0\n\nBy default, Sheetrock will output your data in simple HTML. Providing your own\nrow template is an easy way to customize the formatting. Your function should\naccept a row object. A row object has four properties:\n\n* `num`: The row number (header = `0`, first data row = `1`, and so on).\n\n* `cells`: An object with properties named after the column labels from your\n  header row or the `labels` option.\n\n* `cellsArray`: An array of values that matches the column order of your Sheet\n  or your `query` option. Provided as an alternative to the `cells` object.\n\n* `labels`: An array of column labels in the same order as `cellsArray` that\n  match the properties of the `cells` object.\n\nYour function should return a DOM object or an HTML string that is ready to be\nappended to your target element. A very easy way to do this is to provide a\ncompiled [Handlebars][handlebars] or [Underscore][underscore] template (which\nis itself a function).\n\n\n### callback\n\n* Expects function\n* Renamed from `userCallback` in 1.0.0\n\nYou can provide a function to be called when all processing is complete. The\nfunction will be passed the following parameters, in this order:\n\n* Error (object): If the request failed, this parameter will be a JavaScript\n  error; otherwise, it will be `null`. Always test for an error before using\n  the other parameters.\n\n* Options (object): An object representing the options of the request. The\n  `user` property will contain the options you originally provided (useful for\n  identifying which request the callback is for) and a `request` property with\n  information about the HTTP request to Google’s API.\n\n* Response (object): An object containing response data properties:\n\n  * `.attributes` (object): An object containing useful information about the\n    response data, its structure, and its format.\n\n  * `.raw` (object): This is the raw response data from Google’s API.\n\n  * `.rows` (array): An array of row objects (which are also passed individually to\n    the `rowTemplate`, if one is provided).\n\n  * `.html` (string): A string of HTML representing the final presentational\n    output of the request (which is also appended to the `target` or jQuery\n    reference, if one was provided).\n\n\n### reset\n\n* Expects Boolean\n\nReset request status. By default, Sheetrock remembers the row offset of a\nrequest, whether a request has been completely loaded already, or if it\npreviously failed. Set to `true` to reset these indicators. This is useful if\nyou want to reload data or load it in another context.\n\n\n## Caching\n\nOn large spreadsheets (~5,000 rows), the performance of Google’s API when using\nthe `query` option can be sluggish and, in some cases, can severely affect the\nresponsiveness of your application. At this point, consider caching the\nresponses for reuse via a `callback` function.\n\n\n## Tips and troubleshooting\n\nThe best first step to troubleshooting problems with Sheetrock is to use a\n`callback` function to inspect any errors and response data. Here’s a simple\nexample that logs all returned data to the console:\n\n```javascript\nsheetrock({\n  /* options */\n  callback: function (error, options, response) {\n    console.log(error, options, response);\n  }\n});\n```\n\n\n## Projects using Sheetrock\n\nTell me about your project on the [Wiki][wiki]!\n\n\n## Change log\n\n*See* [CHANGELOG.md][changelog].\n\n\n## Credits and license\n\nSheetrock was written by [Chris Zarate][me]. It was inspired in part by\n[Tabletop.js][tabletop] (which will teach you jazz piano). [John Brecht][brecht]\ncame up with the name. Sheetrock is released under the [MIT license][license].\n\n\n[build-status]: https://travis-ci.org/chriszarate/sheetrock.svg?branch=master\n[travis-ci]: https://travis-ci.org/chriszarate/sheetrock\n[test-coverage]: https://codeclimate.com/github/chriszarate/sheetrock/badges/coverage.svg\n[code-climate-coverage]: https://codeclimate.com/github/chriszarate/sheetrock/coverage\n[code-climate-gpa]: https://codeclimate.com/github/chriszarate/sheetrock/badges/gpa.svg\n[code-climate-code]: https://codeclimate.com/github/chriszarate/sheetrock/code\n[npm-version]: https://badge.fury.io/js/sheetrock.svg\n[fury-io]: https://badge.fury.io/js/sheetrock\n[saucelabs-status]: https://saucelabs.com/browser-matrix/sheetrock.svg\n[saucelabs]: https://saucelabs.com/u/sheetrock\n[public]: https://support.google.com/drive/bin/answer.py?hl=en&answer=2494822\n[query]: https://developers.google.com/chart/interactive/docs/querylanguage\n[underscore]: http://underscorejs.org\n[handlebars]: http://handlebarsjs.com\n[gh-pages]: http://chriszarate.github.io/sheetrock/\n[latest]: http://chriszarate.github.io/sheetrock/dist/sheetrock.min.js\n[cdnjs]: https://cdnjs.com\n[0.3.x]: https://github.com/chriszarate/sheetrock/tree/0.3.0\n[wiki]: https://github.com/chriszarate/sheetrock/wiki/Projects-using-Sheetrock\n[changelog]: https://github.com/chriszarate/sheetrock/blob/master/CHANGELOG.md\n[me]: http://chris.zarate.org\n[tabletop]: http://builtbybalance.com/Tabletop/\n[brecht]: http://about.me/john.brecht\n[license]: http://opensource.org/licenses/MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chriszarate/sheetrock.git"
  },
  "scripts": {
    "compile": "babel src --out-dir dist/src",
    "coverage": "nyc report --reporter=html",
    "coverage-codeclimate": "nyc report --reporter=text-lcov | codeclimate-test-reporter",
    "coverage-coveralls": "nyc report --reporter=text-lcov | coveralls",
    "karma": "karma start test/karma/karma-browserify.conf.js && karma start test/karma/karma-jquery.conf.js && karma start test/karma/karma-requirejs.conf.js && karma start test/karma/karma-vanilla.conf.js && karma start test/karma/karma-webpack.conf.js",
    "lint": "eslint src test",
    "prepublish": "npm run compile",
    "saucelabs": "karma start test/karma/karma-saucelabs.conf.js",
    "test": "BABEL_ENV=test nyc ava test/ava && npm run karma",
    "transform": "webpack --colors --devtool source-map"
  },
  "version": "1.1.4"
}
