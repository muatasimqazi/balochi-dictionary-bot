{
  "_args": [
    [
      {
        "raw": "babel-plugin-espower@^2.3.1",
        "scope": null,
        "escapedName": "babel-plugin-espower",
        "name": "babel-plugin-espower",
        "rawSpec": "^2.3.1",
        "spec": ">=2.3.1 <3.0.0",
        "type": "range"
      },
      "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot/node_modules/ava"
    ]
  ],
  "_from": "babel-plugin-espower@>=2.3.1 <3.0.0",
  "_id": "babel-plugin-espower@2.3.2",
  "_inCache": true,
  "_location": "/babel-plugin-espower",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/babel-plugin-espower-2.3.2.tgz_1484280206577_0.5935867538210005"
  },
  "_npmUser": {
    "name": "twada",
    "email": "takuto.wada@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-espower@^2.3.1",
    "scope": null,
    "escapedName": "babel-plugin-espower",
    "name": "babel-plugin-espower",
    "rawSpec": "^2.3.1",
    "spec": ">=2.3.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ava"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-espower/-/babel-plugin-espower-2.3.2.tgz",
  "_shasum": "5516b8fcdb26c9f0e1d8160749f6e4c65e71271e",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-espower@^2.3.1",
  "_where": "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot/node_modules/ava",
  "author": {
    "name": "Takuto Wada",
    "email": "takuto.wada@gmail.com",
    "url": "https://github.com/twada"
  },
  "bugs": {
    "url": "https://github.com/power-assert-js/babel-plugin-espower/issues"
  },
  "contributors": [
    {
      "name": "James Talmage",
      "url": "https://github.com/jamestalmage"
    }
  ],
  "dependencies": {
    "babel-generator": "^6.1.0",
    "babylon": "^6.1.0",
    "call-matcher": "^1.0.0",
    "core-js": "^2.0.0",
    "espower-location-detector": "^1.0.0",
    "espurify": "^1.6.0",
    "estraverse": "^4.1.1"
  },
  "description": "Babel plugin for power-assert",
  "devDependencies": {
    "babel-core": "^6.1.0",
    "babel-preset-es2015": "^6.1.2",
    "babel-preset-react": "^6.1.2",
    "babel-preset-stage-2": "^6.1.2",
    "mocha": "^3.0.0"
  },
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "dist": {
    "shasum": "5516b8fcdb26c9f0e1d8160749f6e4c65e71271e",
    "tarball": "https://registry.npmjs.org/babel-plugin-espower/-/babel-plugin-espower-2.3.2.tgz"
  },
  "files": [
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "index.js",
    "create.js",
    "lib",
    "package.json"
  ],
  "gitHead": "bcc440a7a86f2f7307a5ae61d6d57a205208e831",
  "homepage": "https://github.com/power-assert-js/babel-plugin-espower",
  "keywords": [
    "assert",
    "assertion",
    "babel",
    "babel-plugin",
    "power-assert",
    "test",
    "testing",
    "transform"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "twada",
      "email": "takuto.wada@gmail.com"
    }
  ],
  "name": "babel-plugin-espower",
  "optionalDependencies": {},
  "readme": "babel-plugin-espower\n================================\n\nBabel plugin for power-assert.\n\n[![Build Status][travis-image]][travis-url]\n[![NPM version][npm-image]][npm-url]\n[![Dependency Status][depstat-image]][depstat-url]\n[![License][license-image]][license-url]\n\n\nDESCRIPTION\n---------------------------------------\n\n`babel-plugin-espower` is a [Babel](https://babeljs.io/) plugin for [power-assert](https://github.com/power-assert-js/power-assert).\n\n`power-assert` provides descriptive assertion messages for your tests, like this.\n\n```\n  1) ES6 demo Destructuring and TemplateLiteral:\n\n      AssertionError:   # test/demo_test.js:7\n\n  assert(`${ alice.name } and ${ bob.name }` === `bob and alice`)\n         |   |     |             |   |       |   |\n         |   |     |             |   |       |   \"bob and alice\"\n         |   |     |             |   \"bob\"   false\n         |   |     \"alice\"       Object{name:\"bob\"}\n         |   Object{name:\"alice\"}\n         \"alice and bob\"\n\n  --- [string] `bob and alice`\n  +++ [string] `${ alice.name } and ${ bob.name }`\n  @@ -1,13 +1,13 @@\n  -bob and alice\n  +alice and bob\n```\n\nPull-requests, issue reports and patches are always welcomed. See [power-assert](https://github.com/power-assert-js/power-assert) project for more documentation.\n\n\nFYI: There's a [babel preset for all power-assert plugins](https://github.com/power-assert-js/babel-preset-power-assert)\n\n\nINSTALL\n---------------------------------------\n\n```\n$ npm install --save-dev babel-plugin-espower\n```\n\n\nCAUTION\n---------------------------------------\n\nBabel6 is incompatible with Babel5. For Babel 5 or lower, you need to use the 1.x release of babel-plugin-espower.\n\n```\n$ npm install --save-dev babel-plugin-espower@1.1.1\n```\n\n\nHOW TO USE\n---------------------------------------\n\n\n### via [.babelrc](https://babeljs.io/docs/usage/babelrc/)\n\n```javascript\n{\n  \"presets\": [\n    ...\n  ],\n  \"plugins\": [\n    \"babel-plugin-espower\"\n  ]\n}\n```\n\n```\n$ babel /path/to/test/some_test.js > /path/to/build/some_test.js\n```\n\nFor example, with `babel-register` module and `.babelrc` above, you can run mocha without code generation steps.\n\n```\n$ $(npm bin)/mocha --require babel-register test/some_test.js\n```\n\n\n### via [Babel API](https://babeljs.io/docs/usage/api/)\n\n```javascript\nvar babel = require('babel-core');\nvar jsCode = fs.readFileSync('/path/to/test/some_test.js');\nvar transformed = babel.transform(jsCode, {\n    presets: [...],\n    plugins: ['babel-plugin-espower']\n});\nconsole.log(transformed.code);\n```\n\n\n### via [Babel Require Hook](https://babeljs.io/docs/usage/require/)\n\n```javascript\nrequire('babel-register')({\n    presets: [...],\n    plugins: ['babel-plugin-espower']\n});\n```\n\nFor example, with `babel_hook.js` above, you can run mocha without code generation steps.\n\n```\n$ $(npm bin)/mocha --require ./babel_hook /path/to/test/demo_test.js\n```\n\n\n### with [babelify](https://github.com/babel/babelify)\n\n```javascript\nvar fs = require('fs');\nvar browserify = require('browserify');\nvar babelify = require('babelify');\nvar glob = require('glob'),\nbrowserify({ entries: glob.sync('./test/*_test.js'), debug: true })\n  .transform(babelify.configure({\n      presets: [...],\n      plugins: ['babel-plugin-espower']\n  }))\n  .bundle()\n  .on('error', function (err) { console.log('Error : ' + err.message); })\n  .pipe(fs.createWriteStream('all_test.js'));\n```\n\n```\n$ $(npm bin)/browserify -d -e ./test/*_test.js -t [ babelify --presets ... --plugins babel-plugin-espower ]\n```\n\n\n### with [babelify](https://github.com/babel/babelify) and [gulp](http://gulpjs.com/)\n\n```javascript\nvar source = require('vinyl-source-stream');\nvar browserify = require('browserify');\nvar glob = require('glob'),\ngulp.task('build_test', function() {\n    var files = glob.sync('./test/*_test.js');\n    var b = browserify({entries: files, debug: true});\n    b.transform(babelify.configure({\n        presets: [...],\n        plugins: ['babel-plugin-espower']\n    }));\n    return b.bundle()\n        .pipe(source('all_test.js'))\n        .pipe(gulp.dest('./build'));\n});\n```\n\n\n### with [babelify](https://github.com/babel/babelify) and [Karma](https://karma-runner.github.io)\n\n```javascript\nmodule.exports = function(config) {\n  config.set({\n    frameworks: ['mocha', 'browserify'],\n    files: [\n      \"test/**/*.js\"\n    ],\n    preprocessors: {\n      \"test/**/*.js\": \"browserify\"\n    },\n    browserify: {\n      debug: true,\n      transform: [\n        [\n          'babelify', {\n            presets: [...],\n            plugins: ['babel-plugin-espower']\n          }\n        ]\n      ]\n    },\n    // ...\n```\n\n\nEXAMPLE\n---------------------------------------\n\n\nFor given test file `test/demo_test.js` below,\n\n```javascript\nimport assert from 'power-assert';\n\ndescribe('ES6 demo', () => {\n\n    it('Destructuring and TemplateLiteral', () => {\n        let [alice, bob] = [ { name: 'alice' }, { name: 'bob' } ];\n        assert(`${alice.name} and ${bob.name}` === `bob and alice`);\n    });\n\n    it('ArrowFunctionExpression and SpreadElement', () => {\n        let seven = 7, ary = [4, 5];\n        assert(seven === ((v, i) => v + i)(...[...ary]));\n    });\n\n    it('Enhanced Object Literals', () => {\n        let name = 'bobby';\n        assert.deepEqual({\n            name,\n            [ `${name}'s greet` ]: `Hello, I'm ${name}`\n        }, null);\n    });\n\n});\n```\n\nprepare `babel_hook.js` to transform tests.\n\n```javascript\n{\n  \"presets\": [\n    ...\n  ],\n  \"plugins\": [\n    \"babel-plugin-espower\"\n  ]\n}\n```\n\nRun `mocha` with `--require babel-register` option. You will see the power-assert output appears.\n\n```\n$ $(npm bin)/mocha --require babel-register test/demo_test.js\n\n  ES6 demo\n    1) Destructuring and TemplateLiteral\n    2) ArrowFunctionExpression and SpreadElement\n    3) Enhanced Object Literals\n\n\n  0 passing\n  3 failing\n\n  1) ES6 demo Destructuring and TemplateLiteral:\n\n      AssertionError:   # test/demo_test.js:7\n\n  assert(`${ alice.name } and ${ bob.name }` === `bob and alice`)\n         |   |     |             |   |       |   |\n         |   |     |             |   |       |   \"bob and alice\"\n         |   |     |             |   \"bob\"   false\n         |   |     \"alice\"       Object{name:\"bob\"}\n         |   Object{name:\"alice\"}\n         \"alice and bob\"\n\n  --- [string] `bob and alice`\n  +++ [string] `${ alice.name } and ${ bob.name }`\n  @@ -1,13 +1,13 @@\n  -bob and alice\n  +alice and bob\n\n      at Context.<anonymous> (test/demo_test.js:19:28)\n\n  2) ES6 demo ArrowFunctionExpression and SpreadElement:\n\n      AssertionError:   # test/demo_test.js:12\n\n  assert(seven === ((v, i) => v + i)(...[...ary]))\n         |     |   |                    |   |\n         |     |   |                    |   [4,5]\n         |     |   9                    [4,5]\n         7     false\n\n  [number] ((v, i) => v + i)(...[...ary])\n  => 9\n  [number] seven\n  => 7\n\n      at Context.<anonymous> (test/demo_test.js:29:28)\n\n  3) ES6 demo Enhanced Object Literals:\n     AssertionError:   # test/demo_test.js:17\n\n  assert.deepEqual({name,[`${ name }'s greet`]: `Hello, I'm ${ name }`}, null)\n                   |      |   |                 |              |\n                   |      |   |                 |              \"bobby\"\n                   |      |   \"bobby\"           \"Hello, I'm bobby\"\n                   |      \"bobby's greet\"\n                   Object{name:\"bobby\",\"bobby's greet\":\"Hello, I'm bobby\"}\n\n      at Context.<anonymous> (test/demo_test.js:40:29)\n```\n\n\nCUSTOMIZE\n---------------------------------------\n\n### by plugin options\n\nYou can customize configs such as assertion patterns via [.babelrc](https://babeljs.io/docs/usage/babelrc/)\n\n```javascript\n{\n  \"presets\": [\n    ...\n  ],\n  \"plugins\": [\n    [\"babel-plugin-espower\", {\n      \"embedAst\": true,\n      \"patterns\": [\n        \"assert.isNull(object, [message])\",\n        \"assert.same(actual, expected, [message])\",\n        \"assert.near(actual, expected, delta, [message])\"\n      ]\n    }]\n  ]\n}\n```\n\n### by API\n\n#### var plugin = createEspowerPlugin(babel, [options])\n\nYou can customize configs such as assertion patterns via [Babel API](https://babeljs.io/docs/usage/api/),\n\n```javascript\nvar babel = require('babel-core');\nvar createEspowerPlugin = require('babel-plugin-espower/create');\nvar jsCode = fs.readFileSync('/path/to/test/some_test.js');\nvar transformed = babel.transform(jsCode, {\n    presets: [...],\n    plugins: [\n        createEspowerPlugin(babel, {\n            embedAst: true,\n            patterns: [\n                'assert.isNull(object, [message])',\n                'assert.same(actual, expected, [message])',\n                'assert.near(actual, expected, delta, [message])'\n            ]\n        })\n    ]\n});\nconsole.log(transformed.code);\n```\n\nor via [Require Hook](https://babeljs.io/docs/usage/require/).\n\n```javascript\nvar createEspowerPlugin = require('babel-plugin-espower/create');\nrequire('babel-register')({\n    presets: [...],\n    plugins: [\n        createEspowerPlugin(babel, {\n            embedAst: true,\n            patterns: [\n                'assert.isNull(object, [message])',\n                'assert.same(actual, expected, [message])',\n                'assert.near(actual, expected, delta, [message])'\n            ]\n        })\n    ]\n});\n```\n\n#### options\n\n| type     | default value       |\n|:---------|:--------------------|\n| `object` | objects shown below |\n\nConfiguration options for `babel-plugin-espower`. If not passed, default options will be used (return value of `defaultOptions()` with default `embedAst`, `visitorKeys`, `astWhiteList`, `path`, `sourceRoot` and `sourceMap`. `visitorKeys` is value of `babel.types.VISITOR_KEYS`. `astWhiteList` is value of `babel.types.BUILDER_KEYS`. `path` is filename passed to babel. `sourceRoot` is be return value of `process.cwd()`, `sourceMap` is babel's internal SourceMap object).\n\n```javascript\n{\n    patterns: [\n        'assert(value, [message])',\n        'assert.ok(value, [message])',\n        'assert.equal(actual, expected, [message])',\n        'assert.notEqual(actual, expected, [message])',\n        'assert.strictEqual(actual, expected, [message])',\n        'assert.notStrictEqual(actual, expected, [message])',\n        'assert.deepEqual(actual, expected, [message])',\n        'assert.notDeepEqual(actual, expected, [message])',\n        'assert.deepStrictEqual(actual, expected, [message])',\n        'assert.notDeepStrictEqual(actual, expected, [message])'\n    ],\n    embedAst: false,\n    visitorKeys: babel.types.VISITOR_KEYS,\n    astWhiteList: babel.types.BUILDER_KEYS,\n    sourceRoot: process.cwd(),\n    path: file.opts.filename,\n    sourceMap: file.opts.inputSourceMap\n}\n```\n\n#### options.embedAst\n\nIf you want to use non-ECMASCript-standard features such as JSX tags in your `assert()`, you should set `embedAst` option to `true`.\n\n```js\nassert(shallow(<Foo />).is('.foo'));\n```\n\n\nCHANGELOG\n---------------------------------------\nSee [CHANGELOG](https://github.com/power-assert-js/babel-plugin-espower/blob/master/CHANGELOG.md)\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](https://github.com/twada)\n\n\nCONTRIBUTORS\n---------------------------------------\n* [James Talmage (jamestalmage)](https://github.com/jamestalmage)\n\n\nOUR SUPPORT POLICY\n---------------------------------------\n\nWe support Node under maintenance. In other words, we stop supporting old Node version when [their maintenance ends](https://github.com/nodejs/LTS).\n\nThis means that any other environment is not supported.\n\nNOTE: If babel-plugin-espower works in any of the unsupported environments, it is purely coincidental and has no bearing on future compatibility. Use at your own risk.\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](https://github.com/power-assert-js/babel-plugin-espower/blob/master/LICENSE) license.\n\n\n[npm-url]: https://npmjs.org/package/babel-plugin-espower\n[npm-image]: https://badge.fury.io/js/babel-plugin-espower.svg\n\n[travis-url]: https://travis-ci.org/power-assert-js/babel-plugin-espower\n[travis-image]: https://secure.travis-ci.org/power-assert-js/babel-plugin-espower.svg?branch=master\n\n[depstat-url]: https://gemnasium.com/power-assert-js/babel-plugin-espower\n[depstat-image]: https://gemnasium.com/power-assert-js/babel-plugin-espower.svg\n\n[license-url]: https://github.com/power-assert-js/babel-plugin-espower/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-MIT-brightgreen.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/power-assert-js/babel-plugin-espower.git"
  },
  "scripts": {
    "test": "mocha --timeout 0"
  },
  "version": "2.3.2"
}
