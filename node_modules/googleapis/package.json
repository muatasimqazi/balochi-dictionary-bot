{
  "_args": [
    [
      {
        "raw": "googleapis",
        "scope": null,
        "escapedName": "googleapis",
        "name": "googleapis",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot"
    ]
  ],
  "_from": "googleapis@latest",
  "_id": "googleapis@23.0.0",
  "_inCache": true,
  "_location": "/googleapis",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/googleapis-23.0.0.tgz_1511301138400_0.6362645491026342"
  },
  "_npmUser": {
    "name": "googleapis-packages",
    "email": "googleapis-packages@google.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "googleapis",
    "scope": null,
    "escapedName": "googleapis",
    "name": "googleapis",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/googleapis/-/googleapis-23.0.0.tgz",
  "_shasum": "02cbe8c56d346e2e8fb0ef8aec52e722322c6fe7",
  "_shrinkwrap": null,
  "_spec": "googleapis",
  "_where": "/Users/muatasimqazi/Documents/Software Development/Bots/balochibot",
  "author": {
    "name": "Google Inc."
  },
  "bugs": {
    "url": "https://github.com/google/google-api-nodejs-client/issues"
  },
  "contributors": [
    {
      "name": "Burcu Dogan",
      "email": "jbd@google.com"
    },
    {
      "name": "Jason Allor",
      "email": "jasonall@google.com"
    },
    {
      "name": "Jason Dobry",
      "email": "jason.dobry@gmail.com"
    },
    {
      "name": "Ryan Seys",
      "email": "ryanseys@google.com"
    },
    {
      "name": "Tim Emiola",
      "email": "tbetbetbe@google.com"
    },
    {
      "name": "Justin Beckwith",
      "email": "beckwith@google.com"
    }
  ],
  "dependencies": {
    "async": "2.6.0",
    "google-auth-library": "0.12.0",
    "string-template": "1.0.0"
  },
  "description": "Google APIs Client Library for Node.js",
  "devDependencies": {
    "@types/minimist": "1.2.0",
    "@types/mkdirp": "0.5.1",
    "@types/mocha": "2.2.44",
    "@types/node": "8.0.53",
    "del-cli": "1.1.0",
    "gts": "0.5.1",
    "ink-docstrap": "1.3.2",
    "intelli-espower-loader": "1.0.1",
    "js-beautify": "1.7.4",
    "jsdoc": "3.5.5",
    "minimist": "1.2.0",
    "mkdirp": "0.5.1",
    "mocha": "4.0.1",
    "nock": "9.1.0",
    "nyc": "11.3.0",
    "opn": "5.1.0",
    "power-assert": "1.4.4",
    "rimraf": "2.6.2",
    "semistandard": "11.0.0",
    "source-map-support": "0.5.0",
    "swig": "1.4.2",
    "typescript": "2.6.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-obSOIKygIU/CEenIf4I5IcfEfCxaGp3dsvuxVfrmoTyQvrW3NK+CU+HmaSiQ8tJ+xf0R6jxHWi7eWkp7ReW8wA==",
    "shasum": "02cbe8c56d346e2e8fb0ef8aec52e722322c6fe7",
    "tarball": "https://registry.npmjs.org/googleapis/-/googleapis-23.0.0.tgz"
  },
  "engines": {
    "node": ">=4.0"
  },
  "gitHead": "e14e0ec34158417b29306f5f698bd213fd0209c9",
  "homepage": "https://github.com/google/google-api-nodejs-client#readme",
  "keywords": [
    "google",
    "api",
    "google apis",
    "client",
    "client library"
  ],
  "license": "Apache-2.0",
  "main": "./lib/googleapis.js",
  "maintainers": [
    {
      "name": "googleapis-packages",
      "email": "googleapis-packages@google.com"
    },
    {
      "name": "jdobry",
      "email": "jason.dobry@gmail.com"
    },
    {
      "name": "ryanseys",
      "email": "ryan@ryanseys.com"
    },
    {
      "name": "tbetbetbe",
      "email": "temiola@google.com"
    },
    {
      "name": "thejbf",
      "email": "burcujdogan@gmail.com"
    }
  ],
  "name": "googleapis",
  "nyc": {
    "exclude": [
      "apis"
    ]
  },
  "optionalDependencies": {},
  "readme": "<img src=\"https://avatars0.githubusercontent.com/u/1342004?v=3&s=96\" alt=\"Google Inc. logo\" title=\"Google\" align=\"right\" height=\"96\" width=\"96\"/>\n\n# Google APIs Node.js Client\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/google/google-api-nodejs-client.svg)](https://greenkeeper.io/)\n\n[![npm version][npmimg]][npm]\n[![Build Status][travisimg]][travis]\n[![Code Coverage][codecovimg]][codecov]\n[![Downloads][downloadsimg]][downloads]\n[![Dependency Status][david-image]][david-url]\n[![devDependency Status][david-dev-image]][david-dev-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n\n[Node.js][node] client library for using Google APIs. Support for authorization and authentication with OAuth 2.0, API Keys and JWT (Service Tokens) is included.\n\n## Library maintenance\nThis client library is supported but in maintenance mode only.  We are fixing necessary bugs and adding essential features to ensure this library continues to meet your needs for accessing Google APIs.  Non-critical issues will be closed.  Any issue may be reopened if it is causing ongoing problems.\n\n## Table of Contents\n\n* [Alpha](#alpha)\n* [Migrating to version `2.x` of this library](#migrating-to-version-2x-of-this-library)\n* [Supported APIs](#supported-apis)\n* [Questions/problems?](#questionsproblems)\n* [Working with Google Cloud Platform APIs?](#working-with-google-cloud-platform-apis)\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Create a service client](#create-a-service-client)\n  * [Authorizing and authenticating](#authorizing-and-authenticating)\n    * [OAuth2 client](#oauth2-client)\n      * [Generating an authentication URL](#generating-an-authentication-url)\n      * [Retrieve authorization code](#retrieve-authorization-code)\n      * [Retrieve access token](#retrieve-access-token)\n      * [Setting global or service-level auth](#setting-global-or-service-level-auth)\n      * [Making authenticated requests](#making-authenticated-requests)\n      * [Manually refreshing access token](#manually-refreshing-access-token)\n    * [Using API keys](#using-api-keys)\n    * [Using JWT (Service Tokens)](#using-jwt-service-tokens)\n    * [Choosing the correct credential type automatically](#choosing-the-correct-credential-type-automatically)\n  * [Specifying request body](#specifying-request-body)\n  * [Media uploads](#media-uploads)\n    * [Example: Upload a plain text file to Google Drive](#example-upload-a-plain-text-file-to-google-drive)\n    * [Example: Upload an image to Google Drive from a readable stream](#example-upload-an-image-to-google-drive-from-a-readable-stream)\n  * [Exposing request object](#exposing-request-object)\n  * [Options](#options)\n    * [Available options](#available-options)\n    * [Global options](#global-options)\n      * [Example: Specifying a default proxy and `auth` to be used for each request](#example-specifying-a-default-proxy-and-auth-to-be-used-for-each-request)\n      * [Example: Specifying global request parameters](#example-specifying-global-request-parameters)\n    * [Service-client options](#service-client-options)\n      * [Example: Specifying a default `auth` option (API key or OAuth2 client)](#example-specifying-a-default-auth-option-api-key-or-oauth2-client)\n      * [Example: Specifying default service client query parameters](#example-specifying-default-service-client-query-parameters)\n    * [Request-level options](#request-level-options)\n* [License](#license)\n* [Contributing](#contributing)\n\n### Alpha\n\nThis library is in Alpha. We will make an effort to support the library, but we reserve the right to make incompatible changes when necessary.\n\n### Migrating to version `2.x` of this library\n\nIf you've used this library before `1.x`, see our [Migration Guide][migrating]\nto learn about migrating your code from `0.x.x` to `1.x`. It's pretty easy :)\n\nIf your code already works with a `1.x` version of this library, no work is required\nto move to `2.x`. However, note that return data of getToken has become an array. Furthermore, it is recommended that you update any direct links in your code,\nas explained in the [Migration Guide][migrating].\n\n### Supported APIs\n\nThe full list of supported APIs can be found [here][supported-list]. The API endpoints are automatically generated, so if the API is not in the list, it is currently not supported by this API client library.\n\n### Questions/problems?\n\n* Ask your development related questions on [![Ask a question on Stackoverflow][overflowimg]][stackoverflow]\n* If you've found an bug/issue, please [file it on GitHub][bugs].\n\n### Working with Google Cloud Platform APIs?\n\nIf you're working with [Google Cloud Platform][cloudplatform] APIs such as\nDatastore, Cloud Storage or Pub/Sub, consider using the [`google-cloud`][googlecloud] package, an\nidiomatic Node.js client for Google Cloud Platform services.\n\nYou can find the list of Google Cloud Platform APIs supported by google-cloud in the\n[google-cloud docs][googlecloudapis].\n\n## Installation\n\nThis library is distributed on `npm`. In order to add it as a dependency,\nrun the following command:\n\n``` sh\n$ npm install googleapis --save\n```\n\n## Usage\n\n**Example** Creates a URL Shortener client and retrieves the long url of the\ngiven short url:\n\n``` js\nvar google = require('googleapis');\nvar urlshortener = google.urlshortener('v1');\n\nvar params = {\n  shortUrl: 'http://goo.gl/xKbRu3'\n};\n\n// get the long url of a shortened url\nurlshortener.url.get(params, function (err, response) {\n  if (err) {\n    console.log('Encountered error', err);\n  } else {\n    console.log('Long url is', response.longUrl);\n  }\n});\n```\n\n**Example** Updates an email message's labels, using the `resource`\nparameter to specify the request body.\n\n```\ngmail.users.messages.modify({\n  id: Number,\n  resource: {\n    addLabelIds: Array,\n    removeLabelIds: Array\n  },\n  userId: 'me',\n}, (err, response) => {\n  // ...\n});\n```\n\n\n### Create a service client\n\nTo interact with the various Google APIs you need to create a service client\nfor that particular API. These are immutable objects you use to make API calls.\n\nExample: Creating a `urlshortener` client with version `v1` of the API.\n\n``` js\nvar google = require('googleapis');\nvar urlshortener = google.urlshortener('v1');\n```\n\nSupported APIs are listed on the [Google APIs Explorer][apiexplorer].\n\n### Authorizing and authenticating\n\n#### OAuth2 client\n\nThis client comes with an [OAuth2][oauth] client that allows you to retrieve an\naccess token and refreshes the token and retry the request seamlessly if you\nalso provide an `expiry_date` and the token is expired. The basics of Google's\nOAuth2 implementation is explained on [Google Authorization and Authentication documentation][authdocs].\n\nIn the following examples, you may need a `CLIENT_ID`, `CLIENT_SECRET` and\n`REDIRECT_URL`. You can find these pieces of information by going to the\n[Developer Console][devconsole], clicking your project --> APIs & auth --> credentials.\n\nFor more information about OAuth2 and how it works, [see here][oauth].\n\nA complete sample application that authorizes and authenticates with the OAuth2\nclient is available at [`samples/oauth2.js`][oauthexample].\n\n##### Generating an authentication URL\n\nTo ask for permissions from a user to retrieve an access token, you\nredirect them to a consent page. To create a consent page URL:\n\n``` js\nvar google = require('googleapis');\nvar OAuth2 = google.auth.OAuth2;\n\nvar oauth2Client = new OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\n// generate a url that asks permissions for Google+ and Google Calendar scopes\nvar scopes = [\n  'https://www.googleapis.com/auth/plus.me',\n  'https://www.googleapis.com/auth/calendar'\n];\n\nvar url = oauth2Client.generateAuthUrl({\n  // 'online' (default) or 'offline' (gets refresh_token)\n  access_type: 'offline',\n\n  // If you only need one scope you can pass it as a string\n  scope: scopes,\n\n  // Optional property that passes state parameters to redirect URI\n  // state: 'foo'\n});\n```\n##### IMPORTANT NOTE\n`refresh_token` is only returned on the first authorization.\n More details [here](https://github.com/google/google-api-nodejs-client/issues/750#issuecomment-304521450)\n\n##### Retrieve authorization code\n\nOnce a user has given permissions on the consent page, Google will redirect\nthe page to the redirect URL you have provided with a code query parameter.\n\n    GET /oauthcallback?code={authorizationCode}\n\n##### Retrieve access token\n\nWith the code returned, you can ask for an access token as shown below:\n\n``` js\noauth2Client.getToken(code, function (err, tokens) {\n  // Now tokens contains an access_token and an optional refresh_token. Save them.\n  if (!err) {\n    oauth2Client.setCredentials(tokens);\n  }\n});\n```\n\n##### Setting global or service-level auth\n\nYou can set the `auth` as a global or service-level option so you don't need to\nspecify it every request.\n\nExample: Setting a global `auth` option.\n\n``` js\nvar google = require('googleapis');\nvar OAuth2 = google.auth.OAuth2;\nvar oauth2Client = new OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\n// set auth as a global default\ngoogle.options({\n  auth: oauth2Client\n});\n```\n\nExample: Setting a service-level `auth` option.\n\n``` js\nvar google = require('googleapis');\nvar OAuth2 = google.auth.OAuth2;\nvar oauth2Client = new OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\nvar drive = google.drive({\n  version: 'v2',\n  auth: oauth2Client\n});\n```\n\nSee the [Options section][options] for more information.\n\n##### Making authenticated requests\n\nYou can start using OAuth2 to authorize and authenticate your\nrequests to Google APIs with the retrieved tokens. If you provide a\n`refresh_token` and `expiry_date` (milliseconds since the Unix Epoch) and the\n`access_token` has expired, the `access_token` will be automatically refreshed\nand the request is replayed (with the except of requests with a media body, as\nwe cannot reliably restart your media stream). Set `expiry_date` to `true` to\nforce a refresh.\n\nThe following sample retrieves Google+ profile of the authenticated user.\n\n``` js\nvar google = require('googleapis');\nvar plus = google.plus('v1');\nvar OAuth2 = google.auth.OAuth2;\nvar oauth2Client = new OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\n// Retrieve tokens via token exchange explained above or set them:\noauth2Client.setCredentials({\n  access_token: 'ACCESS TOKEN HERE',\n  refresh_token: 'REFRESH TOKEN HERE'\n  // Optional, provide an expiry_date (milliseconds since the Unix Epoch)\n  // expiry_date: (new Date()).getTime() + (1000 * 60 * 60 * 24 * 7)\n});\n\nplus.people.get({\n  userId: 'me',\n  auth: oauth2Client\n}, function (err, response) {\n  // handle err and response\n});\n```\n\n##### Manually refreshing access token\n\nIf you need to manually refresh the `access_token` associated with your OAuth2\nclient, make sure you have a `refresh_token` set in your credentials first and\nthen call:\n\n``` js\noauth2Client.refreshAccessToken(function(err, tokens) {\n  // your access_token is now refreshed and stored in oauth2Client\n  // store these new tokens in a safe place (e.g. database)\n});\n```\n\n#### Using API keys\n\nYou may need to send an API key with the request you are going to make.\nThe following uses an API key to make a request to the Google+ API service to\nretrieve a person's profile given a userId:\n\n``` js\nvar google = require('googleapis');\nvar plus = google.plus('v1');\n\nvar API_KEY = 'ABC123'; // specify your API key here\n\nplus.people.get({\n  auth: API_KEY,\n  userId: '+google'\n}, function (err, user) {\n  console.log('Result: ' + (err ? err.message : user.displayName));\n});\n```\n\nAlternatively, you can specify the `key` parameter and it will get used:\n\n``` js\nplus.people.get({\n  key: API_KEY,\n  userId: '+google'\n}, function (err, user) {\n  console.log('Result: ' + (err ? err.message : user.displayName));\n});\n```\n\nTo learn more about API keys, please see the [documentation][usingkeys].\n\n#### Using JWT (Service Tokens)\n\nThe Google Developers Console provides `.json` file that you can use to configure a JWT auth client and authenticate your requests, for example when using a service account.\n\n``` js\nvar google = require('googleapis');\nvar drive = google.drive('v2');\n\nvar key = require('/path/to/key.json');\nvar jwtClient = new google.auth.JWT(\n  key.client_email,\n  null,\n  key.private_key,\n  ['https://www.googleapis.com/auth/drive'], // an array of auth scopes\n  null\n);\n\njwtClient.authorize(function (err, tokens) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  // Make an authorized request to list Drive files.\n  drive.files.list({\n    auth: jwtClient\n  }, function (err, resp) {\n    // handle err and response\n  });\n});\n```\n\nThe parameters for the JWT auth client including how to use it with a `.pem`\nfile are explained in [samples/jwt.js](samples/jwt.js).\n\n#### Choosing the correct credential type automatically\n\nRather than manually creating an OAuth2 client, JWT client, or Compute client,\nthe auth library can create the correct credential type for you, depending upon\nthe environment your code is running under.\n\nFor example, a JWT auth client will be created when your code is running on your\nlocal developer machine, and a Compute client will be created when the same code\nis running on a configured instance of Google Compute Engine.\n\nThe code below shows how to retrieve a default credential type, depending upon\nthe runtime environment. The createScopedRequired must be called to determine\nwhen you need to pass in the scopes manually, and when they have been set for\nyou automatically based on the configured runtime environment.\n\n```js\n// This method looks for the GCLOUD_PROJECT and GOOGLE_APPLICATION_CREDENTIALS\n// environment variables.\ngoogle.auth.getApplicationDefault(function (err, authClient, projectId) {\n  if (err) {\n    throw err;\n  }\n\n  // The createScopedRequired method returns true when running on GAE or a local developer\n  // machine. In that case, the desired scopes must be passed in manually. When the code is\n  // running in GCE or a Managed VM, the scopes are pulled from the GCE metadata server.\n  // See https://cloud.google.com/compute/docs/authentication for more information.\n  if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n    // Scopes can be specified either as an array or as a single, space-delimited string.\n    authClient = authClient.createScoped([\n      'https://www.googleapis.com/auth/compute'\n    ]);\n  }\n\n  // Fetch the list of GCE zones within a project.\n  // NOTE: You must fill in your valid project ID before running this sample!\n  var compute = google.compute({\n    version: 'v1',\n    auth: authClient\n  });\n  var projectId = 'YOUR_PROJECT_ID';\n\n  compute.zones.list({\n    project: projectId,\n    auth: authClient\n  }, function (err, result) {\n    console.log(err, result);\n  });\n});\n```\n\n### Specifying request body\n\nThe body of the request is specified in the `resource` parameter object of the\nrequest. The resource/body is specified as a JavaScript object with key/value\npairs. See the example in the next section below for an example on how it is\nspecified.\n\n### Media uploads\n\nThis client supports multipart media uploads. The resource parameters are\nspecified in the `resource` parameter object, and the media itself is\nspecified in the `media.body` parameter with mime-type specified in `media.mimeType`.\n\n##### Example: Upload a plain text file to Google Drive\n\nThis example uploads a plain text file to Google Drive with the title \"Test\" and\ncontents \"Hello World\".\n\n``` js\nvar drive = google.drive({ version: 'v3', auth: oauth2Client });\n\ndrive.files.create({\n  resource: {\n    name: 'Test',\n    mimeType: 'text/plain'\n  },\n  media: {\n    mimeType: 'text/plain',\n    body: 'Hello World'\n  }\n}, callback);\n```\n\nYou can also upload media by specifying `media.body` as a [Readable stream][stream].\nThis can allow you to upload very large files that cannot fit into memory.\n\nNote: Your readable stream may be [unstable][stability]. Use at your own risk.\n\n##### Example: Upload an image to Google Drive from a readable stream\n\n```js\nvar fs = require('fs');\nvar drive = google.drive({ version: 'v3', auth: oauth2Client });\n\ndrive.files.create({\n  resource: {\n    name: 'testimage.png',\n    mimeType: 'image/png'\n  },\n  media: {\n    mimeType: 'image/png',\n    body: fs.createReadStream('awesome.png') // read streams are awesome!\n  }\n}, callback);\n```\n\nFor more examples of creation and modification requests with media attachments,\ntake a look at the `samples/mediaupload.js` sample.\n\n### Exposing request object\n\nEvery request to the API returns a [`request`][request] object, allowing you to\ntrack the request's progress or general information about the request.\n\n```js\nvar req = drive.files.create(/* ... */);\nconsole.log(req.uri.href); // print out the request's URL.\n```\n\n### Options\n\nFor more fine-tuned control over how your API calls are made,\nwe provide you with the ability to specify additional options that can\nbe applied directly to the [`mikeal/request`][request] object used in\nthis library to make network calls to the API.\n\nYou may specify additional options either in the global `google` object or on a\nservice client basis.\n\n#### Available options\n\nThe options you specify are attached to the `request` object so whatever\n`request` supports, this library supports. You may also specify global or per-service request parameters that will be attached to all API calls you make.\n\nA full list of supported options can be [found here][requestopts].\n\n#### Global options\n\n##### Example: Specifying a default proxy and `auth` to be used for each request\n\n```js\nvar google = require('googleapis');\ngoogle.options({ proxy: 'http://proxy.example.com', auth: auth });\n\n// All requests made with this object will use these settings unless overridden.\n```\n\n##### Example: Specifying global request parameters\n\n```js\nvar google = require('googleapis');\ngoogle.options({ params: { quotaUser: 'user123@example.com' } });\n\n// All requests from all services will contain the above query parameter\n// unless overridden either in a service client or in individual API calls.\n```\n\n#### Service-client options\n\nYou can also specify options when creating a service client.\n\n##### Example: Specifying a default `auth` option (API key or OAuth2 client)\n\n```js\nvar auth = 'API KEY'; // or you could use oauth2Client\nvar urlshortener = google.urlshortener({ version: 'v1', auth: auth });\n\n// All requests made with this object will use the specified auth.\n```\n\nBy doing this, every API call made with this service client will use `'API KEY'`\nto authenticate.\n\n**Note:** Created clients are **immutable** so you must create a new one if you\nwant to specify different options.\n\n##### Example: Specifying default service client query parameters\n\n```js\nvar urlshortener = google.urlshortener({\n  version: 'v1',\n  params: { quotaUser: 'user123@example.com' }\n});\n// All requests made with this service client will contain the\n// quotaUser query parameter unless overridden in individual API calls.\n\n// Calls with this drive client will NOT contain the quotaUser query parameter.\nvar drive = google.drive('v2');\n```\n\n#### Request-level options\n\nYou can specify an `auth` object to be used per request. Each request also\ninherits the options specified at the service level and global level.\n\nFor example:\n\n```js\nvar google = require('googleapis');\nvar bigquery = google.bigquery('v2');\n\n// This method looks for the GCLOUD_PROJECT and GOOGLE_APPLICATION_CREDENTIALS\n// environment variables.\ngoogle.auth.getApplicationDefault(function (err, authClient, projectId) {\n  if (err) {\n    console.log('Authentication failed because of ', err);\n    return;\n  }\n  if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n    authClient = authClient.createScoped(scopes);\n  }\n\n  var request = {\n    projectId: projectId,\n    datasetId: '<YOUR_DATASET_ID>',\n\n    // This is a \"request-level\" option\n    auth: authClient\n  };\n\n  bigquery.datasets.delete(request, function (err, result) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(result);\n    }\n  });\n});\n```\n\nYou can also override *request* options per request, such as `url`, `method`,\nand `encoding`.\n\nFor example:\n\n```js\ndrive.files.export({\n  fileId: 'asxKJod9s79', // A Google Doc\n  mimeType: 'application/pdf'\n}, {\n  encoding: null // Make sure we get the binary data\n}, function (err, buffer) {\n  // ...\n});\n```\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is\navailable in [COPYING][copying].\n\n## Contributing\n\nSee [CONTRIBUTING][contributing].\n\n[snyk-image]: https://snyk.io/test/github/google/google-api-nodejs-client/badge.svg\n[snyk-url]: https://snyk.io/test/github/google/google-api-nodejs-client\n[david-image]: https://david-dm.org/google/google-api-nodejs-client.svg\n[david-url]: https://david-dm.org/google/google-api-nodejs-client\n[david-dev-image]: https://david-dm.org/google/google-api-nodejs-client/dev-status.svg\n[david-dev-url]: https://david-dm.org/google/google-api-nodejs-client?type=dev\n[npmimg]: https://img.shields.io/npm/v/googleapis.svg\n[npm]: https://www.npmjs.org/package/googleapis\n[travisimg]: https://api.travis-ci.org/google/google-api-nodejs-client.svg\n[supported-list]: https://developers.google.com/apis-explorer/\n[bugs]: https://github.com/google/google-api-nodejs-client/issues\n[node]: http://nodejs.org/\n[travis]: https://travis-ci.org/google/google-api-nodejs-client\n[stackoverflow]: http://stackoverflow.com/questions/tagged/google-api-nodejs-client\n[apiexplorer]: https://developers.google.com/apis-explorer\n[urlshort]: https://developers.google.com/url-shortener/\n[usingkeys]: https://support.google.com/cloud/answer/6158862?hl=en\n[contributing]: https://github.com/google/google-api-nodejs-client/blob/master/.github/CONTRIBUTING.md\n[copying]: https://github.com/google/google-api-nodejs-client/tree/master/COPYING\n[authdocs]: https://developers.google.com/identity/protocols/OpenIDConnect\n[request]: https://github.com/request/request\n[requestopts]: https://github.com/request/request#requestoptions-callback\n[stream]: http://nodejs.org/api/stream.html#stream_class_stream_readable\n[migrating]: https://github.com/google/google-api-nodejs-client/tree/master/MIGRATING.md\n[stability]: http://nodejs.org/api/stream.html#stream_stream\n[overflowimg]: https://googledrive.com/host/0ByfSjdPVs9MZbkhjeUhMYzRTeEE/stackoveflow-tag.png\n[devconsole]: https://console.developer.google.com\n[oauth]: https://developers.google.com/identity/protocols/OAuth2\n[oauthexample]: https://github.com/google/google-api-nodejs-client/tree/master/samples/oauth2.js\n[options]: https://github.com/google/google-api-nodejs-client/tree/master#options\n[googlecloud]: https://github.com/GoogleCloudPlatform/google-cloud-node\n[googlecloudapis]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/google-cloud\n[cloudplatform]: https://cloud.google.com/docs/\n[codecovimg]: https://codecov.io/github/google/google-api-nodejs-client/coverage.svg?branch=master\n[codecov]: https://codecov.io/github/google/google-api-nodejs-client?branch=master\n[downloadsimg]: https://img.shields.io/npm/dm/googleapis.svg\n[downloads]: https://nodei.co/npm/googleapis/\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/google/google-api-nodejs-client.git",
    "type": "git"
  },
  "scripts": {
    "build": "tsc",
    "build-tools": "tsc -p tsconfig.tools.json",
    "check": "gts check",
    "clean": "del-cli \"**/*.js.map\" \"*(test|lib|apis|scripts)/**/*.js\" \"**/*.d.ts\"",
    "cover": "nyc --cache mocha test/ --recursive -t 10000 -S -R spec --require intelli-espower-loader && nyc report --reporter=html",
    "doc": "jsdoc -c jsdoc-conf.json",
    "fix": "gts fix",
    "generate-apis": "npm run build-tools && node scripts/generate.js",
    "lint": "semistandard \"samples/**/*.js\"",
    "mocha": "mocha test/ --recursive -t 10000 -S -R spec --require source-map-support/register --require intelli-espower-loader",
    "posttest": "npm run lint",
    "prepare": "npm run build",
    "pretest": "npm run build",
    "test": "npm run cover"
  },
  "semistandard": {
    "ignore": [
      "apis",
      "templates/*"
    ],
    "globals": [
      "after",
      "afterEach",
      "before",
      "beforeEach",
      "describe",
      "it"
    ]
  },
  "version": "23.0.0"
}
